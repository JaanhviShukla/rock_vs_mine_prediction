# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/181JEZtGJpqPhv3BOBMO-7e0CQvZ2yDjY

Importing the dependecies

Data Collection and Data Processing
"""

import numpy as np # for creating numpy arrays
import pandas as pd
from sklearn.model_selection import train_test_split# this library use to split the data into training data and test data
from sklearn.linear_model import LogisticRegression #for logistic regersion model
from sklearn.metrics import accuracy_score #to find accuracy of a model

#data collection and processing
sonar_data=pd.read_csv('/content/Copy of sonar data.csv',header=None)

sonar_data.describe()

#M represents mine
# R represents rock
# separating data and labels
X = sonar_data.drop(columns=60,axis=1)# storing all the values except last column i.e  it is DATA
Y =sonar_data[60]
print(X)
print(Y)

# now we are going to split the dta into trainig data and test data
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.1, stratify=Y,random_state=1)

print(X.shape,X_train.shape,X_test.shape)
print(X_train,Y_train)

# Model Training -->LogisticRegression
model = LogisticRegression()

# training the Logistic Regression model with training data
model.fit(X_train,Y_train)

# finding accuracy on train data
X_train_prediction= model.predict(X_train)
training_data_train_accuracy = accuracy_score(X_train_prediction,Y_train)
print("accuracy on training data : ",training_data_accuracy)

# finding accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_test_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data ', test_data_test_accuracy)

#Making a predictive system
input_data=(0.0200,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.0660,0.2273,0.3100,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.5550,0.6711,0.6415,0.7104,0.8080,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.0510,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.0180,0.0084,0.0090,0.0032)
# changing the input data to numpy array
input_data_as_numpy_array=np.array(input_data)
#reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction =model.predict(input_data_reshaped)
print(prediction)